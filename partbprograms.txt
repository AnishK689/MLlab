#Naive Bayes
import pandas as pd
import numpy as np

data = pd.read_csv("covid.csv")

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
pc_encoded = le.fit_transform(data["pc"].values)
wbc_encoded = le.fit_transform(data["wbc"].values)
mc_encoded = le.fit_transform(data["mc"].values)
ast_encoded = le.fit_transform(data["ast"].values)
bc_encoded = le.fit_transform(data["bc"].values)
ldh_encoded = le.fit_transform(data["ldh"].values)
Y = le.fit_transform(data["diagnosis"].values)

X = np.array(list(zip(pc_encoded,wbc_encoded,mc_encoded,ast_encoded,bc_encoded,ldh_encoded)))

from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

model = MultinomialNB()

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y)


model.fit(X_train,Y_train)
y_pred = model.predict(X_test)

print("Accuracy score: ",accuracy_score(Y_test,y_pred))
print("\nReport: ",classification_report(Y_test,y_pred))

#SVM
import pandas as pd

data=pd.read_csv("/home/ignis/B2_heart.csv")
data.head()

x=data.drop("target",axis=1)
y=data.target

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

from sklearn.svm import SVC

linear=SVC(kernel="linear")
linear.fit(x_train,y_train)


y_pred=linear.predict(x_test)

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,y_pred))

from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test,y_pred))

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

model1=SVC(kernel="sigmoid")
model2=SVC(kernel="poly")
model3=SVC(kernel="rbf")

model1.fit(x_train,y_train)
model2.fit(x_train,y_train)
model3.fit(x_train,y_train)

y_pred1=model1.predict(x_test)
y_pred2=model2.predict(x_test)
y_pred3=model3.predict(x_test)

print("prediction by model1",accuracy_score(y_test,y_pred1))
print("prediction by model2",accuracy_score(y_test,y_pred2))
print("prediction by model3",accuracy_score(y_test,y_pred1))

#Random Forest Classifier
import pandas as pd
import numpy as np

data = pd.read_csv('pima.csv')

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler, MinMaxScaler

X=data.drop("Outcome",axis=1)
y=data["Outcome"]

scaler=StandardScaler()
X_scaled=scaler.fit_transform(X)

X_train,X_test,Y_train,Y_test=train_test_split(X_scaled,y,stratify=y,test_size=0.10,random_state=34)

classifier = RandomForestClassifier(n_estimators=100)
classifier.fit(X_train,Y_train)
y_pred = classifier.predict(X_test)

print("Accuracy:",accuracy_score(Y_test,y_pred))

feature_importances_df = pd.DataFrame
(
    {
        "feature":list(X.columns),
        "importance":classifier.feature_importances_
    }
).sort_values("importance",ascending=False)

feature_importances_df

from sklearn.tree import DecisionTreeClassifier
clf=DecisionTreeClassifier()

clf.fit(X_train,Y_train)
Y_pred = clf.predict(X_test)

print("Accuracy-DecisionTree :",accuracy_score(Y_test,Y_pred))
